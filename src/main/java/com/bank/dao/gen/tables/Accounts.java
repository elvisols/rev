/*
 * This file is generated by jOOQ.
 */
package com.bank.dao.gen.tables;


import com.bank.dao.gen.Indexes;
import com.bank.dao.gen.Keys;
import com.bank.dao.gen.RevDb;
import com.bank.dao.gen.tables.records.AccountsRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounts extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = -1858584205;

    /**
     * The reference instance of <code>REV_DB.ACCOUNTS</code>
     */
    public static final Accounts ACCOUNTS = new Accounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>REV_DB.ACCOUNTS.ID</code>.
     */
    public final TableField<AccountsRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.CUSTOMER_ID</code>.
     */
    public final TableField<AccountsRecord, Integer> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.ACCOUNT_NO</code>.
     */
    public final TableField<AccountsRecord, String> ACCOUNT_NO = createField(DSL.name("ACCOUNT_NO"), org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.ACCOUNT_NAME</code>.
     */
    public final TableField<AccountsRecord, String> ACCOUNT_NAME = createField(DSL.name("ACCOUNT_NAME"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.ACCOUNT_TYPE</code>.
     */
    public final TableField<AccountsRecord, String> ACCOUNT_TYPE = createField(DSL.name("ACCOUNT_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.ACCOUNT_PHONE</code>.
     */
    public final TableField<AccountsRecord, String> ACCOUNT_PHONE = createField(DSL.name("ACCOUNT_PHONE"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.BALANCE</code>.
     */
    public final TableField<AccountsRecord, BigDecimal> BALANCE = createField(DSL.name("BALANCE"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.field("0.0", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.CCY</code>.
     */
    public final TableField<AccountsRecord, String> CCY = createField(DSL.name("CCY"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.BANK_CODE</code>.
     */
    public final TableField<AccountsRecord, String> BANK_CODE = createField(DSL.name("BANK_CODE"), org.jooq.impl.SQLDataType.CHAR(6), this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.KYC_LEVEL</code>.
     */
    public final TableField<AccountsRecord, Integer> KYC_LEVEL = createField(DSL.name("KYC_LEVEL"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>REV_DB.ACCOUNTS.CREATED</code>.
     */
    public final TableField<AccountsRecord, Timestamp> CREATED = createField(DSL.name("CREATED"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * Create a <code>REV_DB.ACCOUNTS</code> table reference
     */
    public Accounts() {
        this(DSL.name("ACCOUNTS"), null);
    }

    /**
     * Create an aliased <code>REV_DB.ACCOUNTS</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>REV_DB.ACCOUNTS</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Accounts(Table<O> child, ForeignKey<O, AccountsRecord> key) {
        super(child, key, ACCOUNTS);
    }

    @Override
    public Schema getSchema() {
        return RevDb.REV_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ACCOUNT_CUSTOMER_ID_INDEX_A, Indexes.PRIMARY_KEY_A);
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.PK_ACCOUNT;
    }

    @Override
    public List<UniqueKey<AccountsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsRecord>>asList(Keys.PK_ACCOUNT);
    }

    @Override
    public List<ForeignKey<AccountsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsRecord, ?>>asList(Keys.FK_ACCOUNT_CUSTOMER_ID);
    }

    public Customers customers() {
        return new Customers(this, Keys.FK_ACCOUNT_CUSTOMER_ID);
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, String, String, String, BigDecimal, String, String, Integer, Timestamp> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
