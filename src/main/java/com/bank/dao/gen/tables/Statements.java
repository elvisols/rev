/*
 * This file is generated by jOOQ.
 */
package com.bank.dao.gen.tables;


import com.bank.dao.gen.Indexes;
import com.bank.dao.gen.Keys;
import com.bank.dao.gen.RevDb;
import com.bank.dao.gen.tables.records.StatementsRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statements extends TableImpl<StatementsRecord> {

    private static final long serialVersionUID = 901642550;

    /**
     * The reference instance of <code>REV_DB.STATEMENTS</code>
     */
    public static final Statements STATEMENTS = new Statements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatementsRecord> getRecordType() {
        return StatementsRecord.class;
    }

    /**
     * The column <code>REV_DB.STATEMENTS.ID</code>.
     */
    public final TableField<StatementsRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.CUSTOMER_ID</code>.
     */
    public final TableField<StatementsRecord, Integer> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.ACCOUNT_NO</code>.
     */
    public final TableField<StatementsRecord, String> ACCOUNT_NO = createField(DSL.name("ACCOUNT_NO"), org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.CCY</code>.
     */
    public final TableField<StatementsRecord, String> CCY = createField(DSL.name("CCY"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.TXN_TIMESTAMP</code>.
     */
    public final TableField<StatementsRecord, Timestamp> TXN_TIMESTAMP = createField(DSL.name("TXN_TIMESTAMP"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.TXN_VALUE_TIMESTAMP</code>.
     */
    public final TableField<StatementsRecord, Timestamp> TXN_VALUE_TIMESTAMP = createField(DSL.name("TXN_VALUE_TIMESTAMP"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.TXN_AMOUNT</code>.
     */
    public final TableField<StatementsRecord, BigDecimal> TXN_AMOUNT = createField(DSL.name("TXN_AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).nullable(false), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.DR_CR</code>.
     */
    public final TableField<StatementsRecord, String> DR_CR = createField(DSL.name("DR_CR"), org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.NARRATION</code>.
     */
    public final TableField<StatementsRecord, String> NARRATION = createField(DSL.name("NARRATION"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.STATEMENTS.BANK_CODE</code>.
     */
    public final TableField<StatementsRecord, String> BANK_CODE = createField(DSL.name("BANK_CODE"), org.jooq.impl.SQLDataType.CHAR(6), this, "");

    /**
     * Create a <code>REV_DB.STATEMENTS</code> table reference
     */
    public Statements() {
        this(DSL.name("STATEMENTS"), null);
    }

    /**
     * Create an aliased <code>REV_DB.STATEMENTS</code> table reference
     */
    public Statements(String alias) {
        this(DSL.name(alias), STATEMENTS);
    }

    /**
     * Create an aliased <code>REV_DB.STATEMENTS</code> table reference
     */
    public Statements(Name alias) {
        this(alias, STATEMENTS);
    }

    private Statements(Name alias, Table<StatementsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Statements(Name alias, Table<StatementsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Statements(Table<O> child, ForeignKey<O, StatementsRecord> key) {
        super(child, key, STATEMENTS);
    }

    @Override
    public Schema getSchema() {
        return RevDb.REV_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_STATEMENT_CUSTOMER_ID_INDEX_1, Indexes.PRIMARY_KEY_1);
    }

    @Override
    public UniqueKey<StatementsRecord> getPrimaryKey() {
        return Keys.PK_STATEMENT;
    }

    @Override
    public List<UniqueKey<StatementsRecord>> getKeys() {
        return Arrays.<UniqueKey<StatementsRecord>>asList(Keys.PK_STATEMENT);
    }

    @Override
    public List<ForeignKey<StatementsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StatementsRecord, ?>>asList(Keys.FK_STATEMENT_CUSTOMER_ID);
    }

    public Customers customers() {
        return new Customers(this, Keys.FK_STATEMENT_CUSTOMER_ID);
    }

    @Override
    public Statements as(String alias) {
        return new Statements(DSL.name(alias), this);
    }

    @Override
    public Statements as(Name alias) {
        return new Statements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statements rename(String name) {
        return new Statements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statements rename(Name name) {
        return new Statements(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, String, String, Timestamp, Timestamp, BigDecimal, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
