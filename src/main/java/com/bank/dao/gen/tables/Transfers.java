/*
 * This file is generated by jOOQ.
 */
package com.bank.dao.gen.tables;


import com.bank.dao.gen.Indexes;
import com.bank.dao.gen.Keys;
import com.bank.dao.gen.RevDb;
import com.bank.dao.gen.tables.records.TransfersRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transfers extends TableImpl<TransfersRecord> {

    private static final long serialVersionUID = -1502019873;

    /**
     * The reference instance of <code>REV_DB.TRANSFERS</code>
     */
    public static final Transfers TRANSFERS = new Transfers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransfersRecord> getRecordType() {
        return TransfersRecord.class;
    }

    /**
     * The column <code>REV_DB.TRANSFERS.REF</code>.
     */
    public final TableField<TransfersRecord, String> REF = createField(DSL.name("REF"), org.jooq.impl.SQLDataType.VARCHAR(125).nullable(false), this, "");

    /**
     * The column <code>REV_DB.TRANSFERS.TXN_AMOUNT</code>.
     */
    public final TableField<TransfersRecord, BigDecimal> TXN_AMOUNT = createField(DSL.name("TXN_AMOUNT"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).nullable(false), this, "");

    /**
     * The column <code>REV_DB.TRANSFERS.TXN_CCY</code>.
     */
    public final TableField<TransfersRecord, String> TXN_CCY = createField(DSL.name("TXN_CCY"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>REV_DB.TRANSFERS.DEBITED_ACCOUNT_NO</code>.
     */
    public final TableField<TransfersRecord, String> DEBITED_ACCOUNT_NO = createField(DSL.name("DEBITED_ACCOUNT_NO"), org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>REV_DB.TRANSFERS.CREDITED_ACCOUNT_NO</code>.
     */
    public final TableField<TransfersRecord, String> CREDITED_ACCOUNT_NO = createField(DSL.name("CREDITED_ACCOUNT_NO"), org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>REV_DB.TRANSFERS.TXN_NARRATION</code>.
     */
    public final TableField<TransfersRecord, String> TXN_NARRATION = createField(DSL.name("TXN_NARRATION"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.TRANSFERS.BANK_CODE</code>.
     */
    public final TableField<TransfersRecord, String> BANK_CODE = createField(DSL.name("BANK_CODE"), org.jooq.impl.SQLDataType.CHAR(6), this, "");

    /**
     * The column <code>REV_DB.TRANSFERS.TXN_TIMESTAMP</code>.
     */
    public final TableField<TransfersRecord, Timestamp> TXN_TIMESTAMP = createField(DSL.name("TXN_TIMESTAMP"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * Create a <code>REV_DB.TRANSFERS</code> table reference
     */
    public Transfers() {
        this(DSL.name("TRANSFERS"), null);
    }

    /**
     * Create an aliased <code>REV_DB.TRANSFERS</code> table reference
     */
    public Transfers(String alias) {
        this(DSL.name(alias), TRANSFERS);
    }

    /**
     * Create an aliased <code>REV_DB.TRANSFERS</code> table reference
     */
    public Transfers(Name alias) {
        this(alias, TRANSFERS);
    }

    private Transfers(Name alias, Table<TransfersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transfers(Name alias, Table<TransfersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Transfers(Table<O> child, ForeignKey<O, TransfersRecord> key) {
        super(child, key, TRANSFERS);
    }

    @Override
    public Schema getSchema() {
        return RevDb.REV_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_E);
    }

    @Override
    public UniqueKey<TransfersRecord> getPrimaryKey() {
        return Keys.PK_TRANSFER;
    }

    @Override
    public List<UniqueKey<TransfersRecord>> getKeys() {
        return Arrays.<UniqueKey<TransfersRecord>>asList(Keys.PK_TRANSFER);
    }

    @Override
    public Transfers as(String alias) {
        return new Transfers(DSL.name(alias), this);
    }

    @Override
    public Transfers as(Name alias) {
        return new Transfers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfers rename(String name) {
        return new Transfers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transfers rename(Name name) {
        return new Transfers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, BigDecimal, String, String, String, String, String, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
