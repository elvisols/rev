/*
 * This file is generated by jOOQ.
 */
package com.bank.dao.gen.tables;


import com.bank.dao.gen.Indexes;
import com.bank.dao.gen.Keys;
import com.bank.dao.gen.RevDb;
import com.bank.dao.gen.tables.records.CustomersRecord;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customers extends TableImpl<CustomersRecord> {

    private static final long serialVersionUID = 693910463;

    /**
     * The reference instance of <code>REV_DB.CUSTOMERS</code>
     */
    public static final Customers CUSTOMERS = new Customers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomersRecord> getRecordType() {
        return CustomersRecord.class;
    }

    /**
     * The column <code>REV_DB.CUSTOMERS.ID</code>.
     */
    public final TableField<CustomersRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REV_DB.CUSTOMERS.FULL_NAME</code>.
     */
    public final TableField<CustomersRecord, String> FULL_NAME = createField(DSL.name("FULL_NAME"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.CUSTOMERS.EMAIL</code>.
     */
    public final TableField<CustomersRecord, String> EMAIL = createField(DSL.name("EMAIL"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.CUSTOMERS.PHONE</code>.
     */
    public final TableField<CustomersRecord, String> PHONE = createField(DSL.name("PHONE"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.CUSTOMERS.ADDRESS</code>.
     */
    public final TableField<CustomersRecord, String> ADDRESS = createField(DSL.name("ADDRESS"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>REV_DB.CUSTOMERS.DATE_OF_BIRTH</code>.
     */
    public final TableField<CustomersRecord, Date> DATE_OF_BIRTH = createField(DSL.name("DATE_OF_BIRTH"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>REV_DB.CUSTOMERS.CREATED</code>.
     */
    public final TableField<CustomersRecord, Timestamp> CREATED = createField(DSL.name("CREATED"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * The column <code>REV_DB.CUSTOMERS.MODIFIED</code>.
     */
    public final TableField<CustomersRecord, Timestamp> MODIFIED = createField(DSL.name("MODIFIED"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * Create a <code>REV_DB.CUSTOMERS</code> table reference
     */
    public Customers() {
        this(DSL.name("CUSTOMERS"), null);
    }

    /**
     * Create an aliased <code>REV_DB.CUSTOMERS</code> table reference
     */
    public Customers(String alias) {
        this(DSL.name(alias), CUSTOMERS);
    }

    /**
     * Create an aliased <code>REV_DB.CUSTOMERS</code> table reference
     */
    public Customers(Name alias) {
        this(alias, CUSTOMERS);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customers(Name alias, Table<CustomersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Customers(Table<O> child, ForeignKey<O, CustomersRecord> key) {
        super(child, key, CUSTOMERS);
    }

    @Override
    public Schema getSchema() {
        return RevDb.REV_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_6);
    }

    @Override
    public UniqueKey<CustomersRecord> getPrimaryKey() {
        return Keys.PK_CUSTOMER;
    }

    @Override
    public List<UniqueKey<CustomersRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomersRecord>>asList(Keys.PK_CUSTOMER);
    }

    @Override
    public Customers as(String alias) {
        return new Customers(DSL.name(alias), this);
    }

    @Override
    public Customers as(Name alias) {
        return new Customers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(String name) {
        return new Customers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customers rename(Name name) {
        return new Customers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, Date, Timestamp, Timestamp> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
