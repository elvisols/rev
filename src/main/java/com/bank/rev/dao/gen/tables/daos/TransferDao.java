/*
 * This file is generated by jOOQ.
 */
package com.bank.rev.dao.gen.tables.daos;


import com.bank.rev.dao.gen.tables.Transfer;
import com.bank.rev.dao.gen.tables.records.TransferRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransferDao extends DAOImpl<TransferRecord, com.bank.rev.dao.gen.tables.pojos.Transfer, String> {

    /**
     * Create a new TransferDao without any configuration
     */
    public TransferDao() {
        super(Transfer.TRANSFER, com.bank.rev.dao.gen.tables.pojos.Transfer.class);
    }

    /**
     * Create a new TransferDao with an attached configuration
     */
    public TransferDao(Configuration configuration) {
        super(Transfer.TRANSFER, com.bank.rev.dao.gen.tables.pojos.Transfer.class, configuration);
    }

    @Override
    public String getId(com.bank.rev.dao.gen.tables.pojos.Transfer object) {
        return object.getRef();
    }

    /**
     * Fetch records that have <code>REF BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfRef(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.REF, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REF IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByRef(String... values) {
        return fetch(Transfer.TRANSFER.REF, values);
    }

    /**
     * Fetch a unique record that has <code>REF = value</code>
     */
    public com.bank.rev.dao.gen.tables.pojos.Transfer fetchOneByRef(String value) {
        return fetchOne(Transfer.TRANSFER.REF, value);
    }

    /**
     * Fetch records that have <code>TXN_AMOUNT BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfTxnAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Transfer.TRANSFER.TXN_AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TXN_AMOUNT IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByTxnAmount(BigDecimal... values) {
        return fetch(Transfer.TRANSFER.TXN_AMOUNT, values);
    }

    /**
     * Fetch records that have <code>TXN_CCY BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfTxnCcy(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.TXN_CCY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TXN_CCY IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByTxnCcy(String... values) {
        return fetch(Transfer.TRANSFER.TXN_CCY, values);
    }

    /**
     * Fetch records that have <code>DEBITED_ACCOUNT_NO BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfDebitedAccountNo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.DEBITED_ACCOUNT_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DEBITED_ACCOUNT_NO IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByDebitedAccountNo(String... values) {
        return fetch(Transfer.TRANSFER.DEBITED_ACCOUNT_NO, values);
    }

    /**
     * Fetch records that have <code>CREDITED_ACCOUNT_NO BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfCreditedAccountNo(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.CREDITED_ACCOUNT_NO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CREDITED_ACCOUNT_NO IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByCreditedAccountNo(String... values) {
        return fetch(Transfer.TRANSFER.CREDITED_ACCOUNT_NO, values);
    }

    /**
     * Fetch records that have <code>TXN_NARRATION BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfTxnNarration(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.TXN_NARRATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TXN_NARRATION IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByTxnNarration(String... values) {
        return fetch(Transfer.TRANSFER.TXN_NARRATION, values);
    }

    /**
     * Fetch records that have <code>BANK_CODE BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfBankCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Transfer.TRANSFER.BANK_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>BANK_CODE IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByBankCode(String... values) {
        return fetch(Transfer.TRANSFER.BANK_CODE, values);
    }

    /**
     * Fetch records that have <code>TXN_TIMESTAMP BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchRangeOfTxnTimestamp(Timestamp lowerInclusive, Timestamp upperInclusive) {
        return fetchRange(Transfer.TRANSFER.TXN_TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TXN_TIMESTAMP IN (values)</code>
     */
    public List<com.bank.rev.dao.gen.tables.pojos.Transfer> fetchByTxnTimestamp(Timestamp... values) {
        return fetch(Transfer.TRANSFER.TXN_TIMESTAMP, values);
    }
}
