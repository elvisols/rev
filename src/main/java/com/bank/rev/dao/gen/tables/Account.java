/*
 * This file is generated by jOOQ.
 */
package com.bank.rev.dao.gen.tables;


import com.bank.rev.dao.gen.Indexes;
import com.bank.rev.dao.gen.Keys;
import com.bank.rev.dao.gen.RevDb;
import com.bank.rev.dao.gen.tables.records.AccountRecord;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 1796773385;

    /**
     * The reference instance of <code>REV_DB.ACCOUNT</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>REV_DB.ACCOUNT.ID</code>.
     */
    public final TableField<AccountRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.CUSTOMER_ID</code>.
     */
    public final TableField<AccountRecord, Integer> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.ACCOUNT_NO</code>.
     */
    public final TableField<AccountRecord, String> ACCOUNT_NO = createField(DSL.name("ACCOUNT_NO"), org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.ACCOUNT_NAME</code>.
     */
    public final TableField<AccountRecord, String> ACCOUNT_NAME = createField(DSL.name("ACCOUNT_NAME"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.ACCOUNT_TYPE</code>.
     */
    public final TableField<AccountRecord, String> ACCOUNT_TYPE = createField(DSL.name("ACCOUNT_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.ACCOUNT_PHONE</code>.
     */
    public final TableField<AccountRecord, String> ACCOUNT_PHONE = createField(DSL.name("ACCOUNT_PHONE"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.BALANCE</code>.
     */
    public final TableField<AccountRecord, BigDecimal> BALANCE = createField(DSL.name("BALANCE"), org.jooq.impl.SQLDataType.DECIMAL(11, 2).defaultValue(org.jooq.impl.DSL.field("0.0", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.CCY</code>.
     */
    public final TableField<AccountRecord, String> CCY = createField(DSL.name("CCY"), org.jooq.impl.SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.BANK_CODE</code>.
     */
    public final TableField<AccountRecord, String> BANK_CODE = createField(DSL.name("BANK_CODE"), org.jooq.impl.SQLDataType.CHAR(6), this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.KYC_LEVEL</code>.
     */
    public final TableField<AccountRecord, Integer> KYC_LEVEL = createField(DSL.name("KYC_LEVEL"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>REV_DB.ACCOUNT.CREATED</code>.
     */
    public final TableField<AccountRecord, Timestamp> CREATED = createField(DSL.name("CREATED"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6), this, "");

    /**
     * Create a <code>REV_DB.ACCOUNT</code> table reference
     */
    public Account() {
        this(DSL.name("ACCOUNT"), null);
    }

    /**
     * Create an aliased <code>REV_DB.ACCOUNT</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>REV_DB.ACCOUNT</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return RevDb.REV_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FK_ACCOUNT_CUSTOMER_ID_INDEX_E, Indexes.PRIMARY_KEY_E);
    }

    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.PK_ACCOUNT;
    }

    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.PK_ACCOUNT);
    }

    @Override
    public List<ForeignKey<AccountRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountRecord, ?>>asList(Keys.FK_ACCOUNT_CUSTOMER_ID);
    }

    public Customer customer() {
        return new Customer(this, Keys.FK_ACCOUNT_CUSTOMER_ID);
    }

    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, String, String, String, BigDecimal, String, String, Integer, Timestamp> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
